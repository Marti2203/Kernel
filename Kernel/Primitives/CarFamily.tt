<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Kernel;
using Kernel.Primitives;
public static class CarFamily
{
<#=Recurse("Ca",5)#>
<#=Recurse("Cd",5)#>
}
<#+

public string TypeCheck(string functionWhole, string functionSub)
=> String.Join(System.Environment.NewLine,"\n\t\tif(!(p."+functionSub+" is Pair))"
,$"\t\t\tthrow new System.ArgumentException(\""+functionWhole+"r's " + functionSub + " has not received a proper argument \");"
,"\t\tp = p."+functionSub+" as Pair;"
,""
);

public string Recurse(string start,int level = 1)
{
start:
if(level == 0) 
{
return string.Join(System.Environment.NewLine
    ,"\tpublic static Object "+start +"r(Pair p)"
    ,"\t{" +start
        .Substring(1,start.Length - 2)
        .Select(c => c == 'a' ? TypeCheck(start,"Car") : TypeCheck(start,"Cdr"))
        .Aggregate(new StringBuilder(200),(c,n) => c.Append(n))
    ,"\t\treturn p."+ (start[1] == 'a' ? "Car" : "Cdr") + ";"
    ,"\t}","");
}
Write(Recurse(start+"a",level - 1));
Write(Recurse(start+"d",level - 1));
level = 0;
goto start;
}
#>