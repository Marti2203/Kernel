<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Kernel.BaseTypes;
using Kernel.Primitives.DynamicBinding.Attributes;
public static class CarFamily
{
<#=Recurse("Ca",5)#>
<#=Recurse("Cd",5)#>
}
<#+

public string TypeCheck(string functionWhole, string functionSub)
=> $@"	
		if (!(p.{functionSub} is Pair))
			throw new System.ArgumentException(""{functionWhole}r's {functionSub} function has not received a proper argument."");
		p = p.{functionSub} as Pair;
	";

public string GenerateCall(string name)
=> $@"
	[Primitive(""{name.ToLower()}r"", 1)]
	[TypeAssertion(0, typeof(Pair))]
	public static T {name}r<T>(Pair p) where T : Object
	{{{
		name.Substring(2)
		    .Reverse()
			.Select(c => c == 'a' ? TypeCheck(name,"Car") : TypeCheck(name,"Cdr"))
			.Aggregate(new StringBuilder(200),(c,n) => c.Append(n))
		}
		return (T)p.{(name[1] == 'a' ? "Car" : "Cdr")};
	}}
	";


public string Recurse(string name,int level = 1)
{
	if(level == 0) 
	{
		return GenerateCall(name);
	}
	else 
	{
		Write(Recurse(name+"a",level - 1));
		Write(Recurse(name+"d",level - 1));
		return GenerateCall(name);
	}
}
#>