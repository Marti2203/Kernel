//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Kernel.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class KernelParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, EscapeSequence=11, Integer=12, Rational=13, Real=14, Complex=15, 
		Identifier=16, COMMENT=17, WHITESPACE=18;
	public const int
		RULE_file = 0, RULE_expression = 1, RULE_atom = 2, RULE_symbol = 3, RULE_pair = 4, 
		RULE_keywords = 5, RULE_string = 6, RULE_number = 7;
	public static readonly string[] ruleNames = {
		"file", "expression", "atom", "symbol", "pair", "keywords", "string", 
		"number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "'.'", "')'", "'#t'", "'#f'", "'#ignore'", "'#inert'", "'()'", 
		"'\"'", "'\\'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "EscapeSequence", 
		"Integer", "Rational", "Real", "Complex", "Identifier", "COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Kernel.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KernelParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KernelParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KernelParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16; expression();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << Integer) | (1L << Rational) | (1L << Real) | (1L << Complex) | (1L << Identifier))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case Integer:
			case Rational:
			case Real:
			case Complex:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; atom();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; pair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 4, RULE_atom);
		try {
			State = 29;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; keywords();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; @string();
				}
				break;
			case Integer:
			case Rational:
			case Real:
			case Complex:
				EnterOuterAlt(_localctx, 3);
				{
				State = 27; number();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 28; symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(KernelParser.Identifier, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public IToken star;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 8, RULE_pair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(T__0);
			State = 34; expression();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << Integer) | (1L << Rational) | (1L << Real) | (1L << Complex) | (1L << Identifier))) != 0)) {
				{
				{
				State = 35; expression();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 41; _localctx.star = Match(T__1);
				State = 42; expression();
				}
			}

			State = 45; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsContext : ParserRuleContext {
		public KeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywords; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywords(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsContext keywords() {
		KeywordsContext _localctx = new KeywordsContext(Context, State);
		EnterRule(_localctx, 10, RULE_keywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] EscapeSequence() { return GetTokens(KernelParser.EscapeSequence); }
		public ITerminalNode EscapeSequence(int i) {
			return GetToken(KernelParser.EscapeSequence, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 12, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(T__8);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << EscapeSequence) | (1L << Integer) | (1L << Rational) | (1L << Real) | (1L << Complex) | (1L << Identifier) | (1L << COMMENT) | (1L << WHITESPACE))) != 0)) {
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 50; Match(EscapeSequence);
					}
					break;
				case 2:
					{
					State = 51;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__8 || _la==T__9) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(KernelParser.Integer, 0); }
		public ITerminalNode Rational() { return GetToken(KernelParser.Rational, 0); }
		public ITerminalNode Real() { return GetToken(KernelParser.Real, 0); }
		public ITerminalNode Complex() { return GetToken(KernelParser.Complex, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKernelVisitor<TResult> typedVisitor = visitor as IKernelVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 14, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Integer) | (1L << Rational) | (1L << Real) | (1L << Complex))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '@', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1A', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', ' ', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\'', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '*', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '.', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x37', 
		'\n', '\b', '\f', '\b', '\xE', '\b', ':', '\v', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x5', '\x3', '\x2', 
		'\x6', '\n', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\xE', '\x11', '\x2', 
		'@', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x4', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\b', 
		'!', '\x3', '\x2', '\x2', '\x2', '\n', '#', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x31', '\x3', '\x2', '\x2', '\x2', '\xE', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '=', '\x3', '\x2', '\x2', '\x2', '\x12', '\x14', 
		'\x5', '\x4', '\x3', '\x2', '\x13', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x1A', '\x5', '\x6', '\x4', '\x2', 
		'\x18', '\x1A', '\x5', '\n', '\x6', '\x2', '\x19', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', ' ', '\x5', '\f', '\a', '\x2', '\x1C', 
		' ', '\x5', '\xE', '\b', '\x2', '\x1D', ' ', '\x5', '\x10', '\t', '\x2', 
		'\x1E', ' ', '\x5', '\b', '\x5', '\x2', '\x1F', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		' ', '\a', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x12', '\x2', 
		'\x2', '\"', '\t', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x3', 
		'\x2', '\x2', '$', '(', '\x5', '\x4', '\x3', '\x2', '%', '\'', '\x5', 
		'\x4', '\x3', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '\'', '*', 
		'\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', 
		')', '\x3', '\x2', '\x2', '\x2', ')', '-', '\x3', '\x2', '\x2', '\x2', 
		'*', '(', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x4', '\x2', '\x2', 
		',', '.', '\x5', '\x4', '\x3', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\a', '\x5', '\x2', '\x2', '\x30', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\t', '\x2', '\x2', '\x2', '\x32', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x38', '\a', '\v', '\x2', '\x2', '\x34', 
		'\x37', '\a', '\r', '\x2', '\x2', '\x35', '\x37', '\n', '\x3', '\x2', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', '\v', '\x2', '\x2', '<', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\t', '\x4', '\x2', '\x2', '>', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x15', '\x19', '\x1F', '(', '-', '\x36', '\x38',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
